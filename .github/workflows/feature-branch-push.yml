name: ðŸ§© Feature branch push

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci-test:
    if: ${{ startsWith(github.ref, 'refs/heads/feat/') }}
    uses: ./.github/workflows/ci-test.yml
    secrets: inherit

  build:
    if: ${{ startsWith(github.ref, 'refs/heads/feat/') }}
    runs-on: ubuntu-latest
    needs: ci-test
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          npmtoken: ${{ secrets.VERDACCIO_TOKEN }}

      - uses: actions/cache@v4
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Build
        run: |
          pnpm lint:types
          pnpm build

      # Deploy to univer.ai
      - name: Login to Aliyun Container Registry (ACR)
        uses: aliyun/acr-login@v1
        with:
          login-server: univer-acr-registry.cn-shenzhen.cr.aliyuncs.com
          region-id: cn-shenzhen
          username: '${{ secrets.REGISTRY_USERNAME }}'
          password: '${{ secrets.REGISTRY_PASSWORD }}'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: univer-acr-registry.cn-shenzhen.cr.aliyuncs.com/devops/binfmt:qemu-v7.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          driver-opts: |
            image=univer-acr-registry.cn-shenzhen.cr.aliyuncs.com/devops/buildkit:buildx-stable-1

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=$(echo "${{ github.sha }}" | cut -c 1-7)
          make push_image PUSH_TAG=$IMAGE_TAG BUILDER=${{ steps.buildx.outputs.name }} CR=${{ secrets.REGISTRY_CR }}
        # continue-on-error: true

  deploy:
    if: ${{ startsWith(github.ref, 'refs/heads/feat/') }}
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 60
    steps:
      - name: Set IMAGE_TAG environment variable
        run: echo "IMAGE_TAG=$(echo ${{ github.sha }} | cut -c 1-7)" >> $GITHUB_ENV

      - name: Set FEATURE environment variable
        run: echo "FEATURE=$(echo ${GITHUB_REF#refs/heads/feat/})" >> $GITHUB_ENV

      - uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          repository: dream-num/helm-chart-private
          event-type: dispatch-push-feature
          client-payload: '{"service":"univer-site","tag":"${{ env.IMAGE_TAG }}","feature":"${{ env.FEATURE }}"}'
